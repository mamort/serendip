
************************************************************************************
* Introduction                                                      
************************************************************************************

Serendip is a javascript library that is intended to make it easier to create a GUI frontend
using the search engine Solr. The library requires 7 javascript files:

jquery-1.3.2.min.js
jquery.history.js
date.format-1.2.3.js

serendip.core.js
serendip.theme.js
serendip.theme.translation.js

serendip.config.js

One CSS file containing the styles for the default theme is also included along with a few
images found in the "images" catalog:

serendip.css
images/

The purpose of the Serendip library is to make it easy to display search results generated by
Solr. In the simplest scenario you just need to edit the configuration options in the 
serendip.config.js file and configure your Solr search engine correctly. If you want to use the
default theme, but want to change the language of the messages displayed to the user you can edit
the serendip.theme.translation file and localize the messages found there.

In addition to these changes you also must change the serendip.theme.js a bit because the theme 
is tied to the names of the fields that are available from Solr. In the example configuration 
fields are specified like this:

search.setFields(["id","title","description","news_release_date", "url", "key_revisor"]);

These field names are used in various places in the the serendip.theme.js file to output the actual
content. You will most likely have different field names in your Solr setup so you need to change 
both the field configuration in serendip.config.js and the corresponding field names found in the 
serendip.theme.js file.

It is likely many will want to change the search appearance to fit their own needs. There are 
basically two ways to do it depending on the flexibility you want. The easiest way is to just change 
the serendip.css file adding or changing the styles you want. If you want or need to change the html 
that is output you can change or create a new serendip.theme.js file. The serendip.theme.js contains 
99% of the html that is output on the page and should be relatively easy to customize.

************************************************************************************
* Features                                                   
************************************************************************************
- All JSON parsing taking care of. Just change the HTML in convenient javascript callback methods.

- All search, sorting, paging and filtering is done async without reloading the page.

- All search, sorting, paging and filtering events are saved in the browser history.
    - This means that:
      - Browser back and forward buttons work as expected.
      - Copying the URL into a new window will give you the exact same results along 
        with the sorting, paging and filtering parameters.
      - Allows you to bookmark any result.

- Autocomplete on the search input box using a spesific Solr field

- Spelling suggestions (ie "Did you mean") using the Solr spellchecking component

- Sort results ascending/descending based on Solr fields. Possible to use multiple sort fields.
  
- Display highlighted results (based on any Solr field) with easy configuration.

- Use any number of facets to filter the search results with powerful and easy configuration.
    - The filter can include multiple values from the same facet field (OR'ed) to display the 
      combined results for those values.
    - Facet values from different facet fields are used to filter results.
    - Possible to use facets to create faceted navigation.
    - "Show more" functionality to display more facets based on limits specified in configuration.
    - Three types of facets supported
        - Regular text value facets
        - Dynamic date range facets created by specifying a startdate, enddate and dategap.
        - Custom date range facets to filter results using custom date ranges. You can use custom 
          range facets to provide filters like: "Last three months", "Last five years", etc

- Add any additional Solr config options easily in configuration


************************************************************************************
* Configuration (serendip.config.js)                                           
************************************************************************************

-------------------------------------------
Basic configuration
-------------------------------------------

var search = new Serendip.Search({
  solrBaseUrl: "http://localhost:8983/solr",
  numResults: 5,
  
  searchFieldId: "#querystring",
  searchBtnId: "#searchbutton", 
  
  theme : mytheme
});

These options are pretty much self explanatory. The theme variable "mytheme" is created
in the serendip.theme.js. The option "numResults" specifies the number of results to display
on each page.

-------------------------------------------
Typical Solr configuration options
-------------------------------------------
search.setFields(["id","title","description","news_release_date", "url", "key_revisor"]);
search.addQueryParam("qt", "dismax");

Specifies the fields you want to use along with the Solr request handler to use. Typically,
people will want to use the DISMAX request handler. Make sure to update the serendip.theme.js file
with the corresponding field names that you use here.

-------------------------------------------
Sorting configuration
-------------------------------------------
search.addSortField(new Serendip.SortField({name: "news_release_date", header: "dato"}));
search.addSortField(new Serendip.SortField({name: "url", header: "url"}));

Specify the fields to use for sorting. The default sort is always by relevans.

-------------------------------------------
Basic Facet configuration
-------------------------------------------
search.addQueryParam("facet", "true");
search.addQueryParam("facet.mincount", "1");
search.addQueryParam("facet.limit", "20");

The first option ("facet=true") is required to use facets at all. The "facet.mincount" specifies 
that only facet values which matches at least this count will be returned. Finally the "facet.limit"
specifies an upper bound on the number of facet values returned.

-------------------------------------------
Facets configuration
-------------------------------------------
search.addFacet(new Serendip.Facet({options});
search.addFacet(new Serendip.DateFacet({options});
search.addFacet(new Serendip.CustomDateFacet({options});

These are the three different facet types available. Each of them has some type specific config options.

Serendip.Facet({
  id: "revisor",
  name: "key_revisor", 
  activeHeader: "Revisor", 
  header: "Filtrer etter revisor", 
  minFacetsToDisplay: 5, 
  maxFacetsToDisplay: 10
});

This is the configuration options for regular text facets. All of these options are self explanatory. The
id can be any alphanumeric value as long as it is unique among the configured facets.

Serendip.DateFacet({
  id: "news",
  name: "news_release_date", 
  activeHeader: "Release date", 
  header: "Filter by release date", 
  minFacetsToDisplay: 5, 
  maxFacetsToDisplay: 10,
  
  dateStart: "NOW/MONTH-5MONTHS",
  dateEnd: "NOW/MONTH+1MONTH",
  dateGap: "+1MONTH",
  
  dateValue: "",
  dateFormat: "mmmm"
})

The DateFacet and CustomDateFacet inherits from the basic text facet and consequently have the same
configuration options. The date facet have additionally options for specifying "datestart", "dateend",
"dategap" and "dateformat". You specify a date start, end and gap using Solr syntax and Solr will 
generate one facet value for each gap between start and end. If no documents exist for a gap, the gap 
is skipped.

If "dateValue" is specified it will be display instead of the dateformat.

See this link for info on what values are available for specifying the date ranges:
http://lucene.apache.org/solr/api/org/apache/solr/util/DateMathParser.html

These are options for the dateformat:
d  	  Day of the month as digits; no leading zero for single-digit days.
dd 	  Day of the month as digits; leading zero for single-digit days.
ddd 	Day of the week as a three-letter abbreviation.
dddd 	Day of the week as its full name.
m 	  Month as digits; no leading zero for single-digit months.
mm 	  Month as digits; leading zero for single-digit months.
mmm 	Month as a three-letter abbreviation.
mmmm 	Month as its full name.
yy 	  Year as last two digits; leading zero for years less than 10.
yyyy 	Year represented by four digits.
h 	  Hours; no leading zero for single-digit hours (12-hour clock).
hh 	  Hours; leading zero for single-digit hours (12-hour clock).
H 	  Hours; no leading zero for single-digit hours (24-hour clock).
HH 	  Hours; leading zero for single-digit hours (24-hour clock).
M 	  Minutes; no leading zero for single-digit minutes.
MM 	  Minutes; leading zero for single-digit minutes.
s 	Seconds; no leading zero for single-digit seconds.
ss 	Seconds; leading zero for single-digit seconds.

For more dateformat options see:
http://blog.stevenlevithan.com/archives/date-time-format


Serendip.CustomDateFacet({
  id: "news2",
  name: "news_release_date", 
  activeHeader: "Release date", 
  header: "Filtrer etter utgivelsesdato", 
  minFacetsToDisplay: 5, 
  maxFacetsToDisplay: 10,
  
  getFacetValues: function(){
    var values = [];
    
    values.push(new Serendip.CustomDateFacetValue({
      name: "Siste tre mnd", 
      value: "NOW-3MONTHS TO NOW"
    }));
    
    values.push(new Serendip.CustomDateFacetValue({
      name: "Siste 5 år", 
      value: "NOW-5YEAR TO NOW"
    }));
    
    return values;
  }
})

When using the CustomDateFacet you specify the actual values to be displayed for 
the facet along with the associated date filter value. These facets will never
display a count behind the facet value as the other facets will do because it is
not possible to get such a count calculated when the search is performed. It would
be possible to get the count if a separate request was done for each facet value,
but this would generate too many requests.

Note that many (all?) CustomDateFacets can be displayed as regular DateFacets which
also will contain the proper count if specified correctly. To display "Last 5 months"
as a regular DateFacet:

Serendip.DateFacet({
  id: "news",
  name: "news_release_date", 
  activeHeader: "Release date", 
  header: "Filter by release date", 
  minFacetsToDisplay: 5, 
  maxFacetsToDisplay: 10,
  
  dateStart: "NOW/MONTH-5MONTHS",
  dateEnd: "NOW/MONTH+1MONTH",
  dateGap: "+5MONTH",
  dateValue: "Last 5 months"
})

-------------------------------------------
Autocomplete on input box configuration
-------------------------------------------
search.setAutocompleteField("key_revisor");

You can only use a single Solr field for autocomplete, but by using Solr copyfield you can add values
from other fields into this field. Typically you create an own field ("autocomplete_terms") or similarly
named that you copy values from other fields into and use this field as your autocomplete field.

-------------------------------------------
Field highlighting configuration
-------------------------------------------
search.setHighlightFields(["text", "field2", "field3"]);
search.addQueryParam("hl.fragsize", "500");

In order for field values to include highlighting the fields must be specified as a highlighted field. All
fields specified using the "setHighlightField" function will be returned with highlighting when available.
In the callback functions in serendip.theme.js a "fields" array is available with the content of all regular
fields AND highlighted fields combined. This means that fields["text"] will contain the highlighted content
for the text field. If the field "text" is only specified as a regular field in the "setFields" method it
will contain non-highlighted content.

The "hl.fragsize" option specifies how much text from the field to use for highlighting. In this example
we use max 500 characters from the text field to use for highlighting.

-------------------------------------------
Spellcheck / search suggestions configuration
-------------------------------------------
search.addQueryParam("spellcheck", "true");

When using the spellcheck or search suggestions Solr needs to be configured correctly. By default the spellcheck
component is not added to any request handlers and you must configure the request handler you are using to use
the spellcheck component. Read the Solr manual on how to do this.

Additionally, before you will get any suggestions you must build your Solr spellcheck index once. To do this 
you must issue "spellcheck.build=true". In a typical scenario you use field values that are in your index for 
spellchecking or search suggestions which means that you must update the spellcheck index after documents
have been commited in order for new values in the index to be used for suggestions.

For more info about the Solr spellcheck component read this:
http://wiki.apache.org/solr/SpellCheckComponent